# Makefile for fl_imgtk, LLVM ( MacOS )
# (C)2017 Raphael Kim / rageworx@gmail.com
#

# Compiler configure.
GCC = llvm-gcc
GPP = llvm-g++
AR  = ar
LT  = libtool
RL  = ranlib
LIP = lipo

# Check architecture for x86.64 or arm64.
KRNL = $(shell uname -s)
ARCH = $(shell uname -m)
KVER = $(shell uname -r | cut -d . -f1)

# FLTK place
FLTKCFG     = fltk-config --use-images
FLTKDIR    := $(shell ${FLTKCFG} --cxxflags)
FLTKLIBDIR := $(shell ${FLTKCFG} --ldflags)

# Sources and how it built
# Optimization issue: recommend to build with using -ffast-math option.
# Change if your CPU architecture supports more high technologies.
INCDIR    = ./inc
SOURCEDIR = ./src
OBJDIR    = ./obj/Release
OUTBIN    = libfl_imgtk.a
OUTDIR    = ./lib
DEFINEOPT = -DUSING_INTERPOLATED_ROTATE_FREE
# Additional options
OPTIMIZEOPT  = -ffast-math -O3
CPUARCHOPT   =
OSOPT        =
MACOS_MINVER = 11.0


# architecture flag setting.
# Darwin, kernel 20 (big sur) automatically using universal binary.
ifeq ($(KRNL),Darwin)
    ifeq ($(shell test $(KVER) -gt 19; echo $$?),0)
		CPUARCHOPT += -arch x86_64 -arch arm64
        OSOPT += -mmacosx-version-min=${MACOS_MINVER}
    endif
endif

CFLAGS    = -I$(INCDIR) -I$(SOURCEDIR) -I$(FLTKDIR) $(DEFINEOPT) $(OPTIMIZEOPT) $(CPUARCHOPT) $(BITSOPT)
CFLAGS    += ${OSOPT}

all: prepare clean ${OUTDIR}/${OUTBIN}

prepare:
	@mkdir -p ${OBJDIR}
	@mkdir -p ${OUTDIR}

${OBJDIR}/fl_imgtk_tonemap.o:
	@$(GPP) -c ${SOURCEDIR}/fl_imgtk_tonemap.cpp ${CFLAGS} -o $@

${OBJDIR}/fl_smimg.o:
	@$(GPP) -c ${SOURCEDIR}/fl_smimg.cpp ${CFLAGS} -o $@

${OBJDIR}/fl_imgtk_clahe.o:
	@$(GPP) -c ${SOURCEDIR}/fl_imgtk_clahe.cpp ${CFLAGS} -o $@

${OBJDIR}/fl_imgtk.o:
	@$(GPP) -c ${SOURCEDIR}/fl_imgtk.cpp ${CFLAGS} -o $@

${OUTDIR}/${OUTBIN}: ${OBJDIR}/fl_imgtk_tonemap.o ${OBJDIR}/fl_smimg.o ${OBJDIR}/fl_imgtk_clahe.o ${OBJDIR}/fl_imgtk.o
	@echo "Generating $@ ..."
	@$(AR) -cr $@ $^
	@$(RL) $@
	@cp -f ${INCDIR}/fl_imgtk.h ${OUTDIR}

clean:
	@echo "Cleaning built directories ..."
	@rm -rf ${OBJDIR}/*
	@rm -rf ${OUTDIR}/${OUTBIN}
