# Makefile for fl_imgtk, LLVM
# (C)2017 Raphael Kim / rageworx@gmail.com
#

# Compiler configure.
GCC = llvm-gcc
GPP = llvm-g++
AR  = ar
LT  = libtool
RLB = ranlib
LIP = lipo

# Check architecture for x86.64 or arm64.
ARCH = $(shell uname -m)

# FLTK place
FLTKDIR    = /usr/local/include
FLTKLIBDIR = /usr/local/lib
FLTKLIBS   = -L$(FLTKLIBDIR) -lfltk -lfltk_images -lfltk_png -lfltk_jpeg

# Sources and how it built
# Optimization issue: recommend to build with using -ffast-math option.
# Change if your CPU architecture supports more high technologies.
INCDIR    = ./inc
SOURCEDIR = ./src
OBJDIR    = ./obj/Release
OUTBIN    = libfl_imgtk.a
OUTDIR    = ./lib
DEFINEOPT = -DUSING_INTERPOLATED_ROTATE_FREE
OPTIMIZEOPT = -ffast-math -O3
CPUARCHOPT =

# architecture flag setting.
ifeq ($(ARCH),arm64)
CPUARCHOPT += -arch x86_64 -arch arm64
endif

CFLAGS    = -I$(INCDIR) -I$(SOURCEDIR) -I$(FLTKDIR) $(DEFINEOPT) $(OPTIMIZEOPT) $(CPUARCHOPT) $(BITSOPT)

all: prepare clean ${OUTDIR}/${OUTBIN}

prepare:
	@mkdir -p ${OBJDIR}
	@mkdir -p ${OUTDIR}

${OBJDIR}/fl_imgtk_tonemap.o:
	@$(GPP) -c ${SOURCEDIR}/fl_imgtk_tonemap.cpp ${CFLAGS} -o $@

${OBJDIR}/fl_smimg.o:
	@$(GPP) -c ${SOURCEDIR}/fl_smimg.cpp ${CFLAGS} -o $@

${OBJDIR}/fl_imgtk_clahe.o:
	@$(GPP) -c ${SOURCEDIR}/fl_imgtk_clahe.cpp ${CFLAGS} -o $@

${OBJDIR}/fl_imgtk.o:
	@$(GPP) -c ${SOURCEDIR}/fl_imgtk.cpp ${CFLAGS} -o $@

${OUTDIR}/${OUTBIN}: ${OBJDIR}/fl_imgtk_tonemap.o ${OBJDIR}/fl_smimg.o ${OBJDIR}/fl_imgtk_clahe.o ${OBJDIR}/fl_imgtk.o
	@echo "Generating $@ ..."
	@$(AR) -r $@ $^
	@$(RLB) -q $@
	@cp -f ${INCDIR}/fl_imgtk.h ${OUTDIR}

clean:
	@echo "Cleaning built directories ..."
	@rm -rf ${OBJDIR}/*
	@rm -rf ${OUTDIR}/${OUTBIN}
